MongoDB
MongoDB is a document oriented, non-relational NoSQL database.
Important features of MongoDB:-
1:- MongoDB stores data in a collection as a document. Each document has field(key-value pairs).
2:- MongoDB has built-in scalability making it easy to distribute data across multiple machines & generate a ton of data.
3:- MongoDB has great flexibility and it does not enforces a predefined schema on a collection.
4:- MongoDB is a performant database solution because of the features like embedded data model, indexing, sharding, flexible documents etc.
5:- MongoDB is a free and open-source database solution published under SSPL license.







What is BSON Data Format ?
BSON, or Binary JSON, is the data format that MongoDB uses to organize and store data.This data format includes all JSON data structure types and adds support for types including dates, different size integers, ObjectIds, and binary data.


inserting documents in collection
db.<database_name>.insertMany([{},{},{}])             //many data
db.<database_name>.insert({})                         //single data



fetch documents from collections
db.<database_name>.findOne()                        //single data
db.<database_name>.findOne({})                      //single data




update documents in a collection
db.<database_name>.updateOne({"<search criteria>"}, {"$set": {}})   //for single data
db.<database_name>.updateMany({"<search criteria>"}, {"$set": {}})   //for many data






delete documents in a collection
db.<database_name>.deleteOne({"<search criteria>"})    // for deleting one entry data
db.customer.remove({name:"Abhishek"}, true)
db.<database_name>.deleteMany({"<search criteria>"})     // for deleting many entry data
db.customer. remove({name:"Abhishek"})





Cursor in MongoDB
db.<database_name>.find().toArray()
 db.<database_name>.find().forEach(function(customer){print("Customer name: " +customer.name)})




Data types in MongoDB
string,boolean,number(Types:- Int,Decimal),ObjectId, Date(Types:- ISODate, Timestamp), Embedded_Document, Array, 

typeof db.<database_name>.findOne().age
db.stats()




Embedded_Document
db.customer. remove({name:"Abhishek"})
nodejsdb> db.customer.updateOne({<find_update>},{$set:{<upodate>}})
nodejsdb> db.customer.findOne({<find_value>})
nodejsdb> db.customer.findOne({<find_value>}).<search_find>



Working with Working
nodejsdb> db.customer.deleteMany({})              //deleteMany


MongoDB Compass
1. Download and install MongoDB compass from https://www.mongodb.com/try/download/compass


Creating a hosted database with atlas
https://www.mongodb.com/cloud/atlas






// MVC Architrure 

//          REQUEST                                ||  Model(BUSINESS MODEL)
// Client-------------Router-----------Controler---
//       -----------------------------             || View (PRESENTATION LAYER)
//           RESPONSE                   Application Logic 
               





Global Error Handling

*. Operation Errors
Operational errors are the problems that we can predict that will happen at some point in future. We need to handle them in advance.
-Users trying to access an invalid route.
-Inputting invalid data.
-Application failed to connect to server.
-Request timeout etc.


*. Programming Errors
Programming errors are simply bugs that we programmers, by mistake, introduces them in out code.
-Trying to read property of an undefined variable.
-Using await without async.
-Accidently using req.query instead od req.body.
-Passing a number where an object is expected etc.




// Handling invalid ID errors NODE_ENV change 
$env:NODE_ENV="production"; nodemon 18-Mongoos.js







// How to Authentictaion Works with JWT




                                           Post/login{email, password}
Login/Accsaa             Client      <---------Request Data------------------->   Server/Secret
                                                  Get/profile


--------------------------------------------------------
|     Header          Payload                 Secret   |
|                        |                             |
--------------------------------------------------------




--------------------------------------------------------
|     Header          Payload                 Secret   |     <----JWT----> Client
|                        |                             |
--------------------------------------------------------





--------------------------------------------------------
|     Header        Signature                 Secret   |
|                       |                              |
--------------------------------------------------------


--------------------------------------------------------
|     Header        Test Signature                 Secret   |
|                       |                              |
--------------------------------------------------------



Signature      =       Test Signature           Authentictaion

Signature      !=      Test Signature           Not Authentictaion


// Password Reset functionality


1. User send a POST request to forget password route only with his email address.
2. The user then sends a POST request password with the new password and then token send to his email.







// Cross site scriting (XSS) Attack
Cross site scriting(XSS) is a type of attack where the attacker tries to inject scritps into our web page to run some malicious code.
1- Allow attacker to read the browser's local storage.
2- If the application is storing JWT in local storage, it can be ready by attackerand can be user for hacking into the application.
3- Can be prevented by sending and receiving JWT in HTTP Cokkir, instead of storing it in local storage of browser.





// Impementing Rate Limiting

1. Brute Force attack
In this type of attack, the hacker basically tries to huess a password by trying millions and millions of random password until they find the right one.
- Make the login request slow(using bcrypt)
- Implement rate Limiting
- Impementing maximum login attempts.


2. Denial of Service
In this type of attack sends so many requests to the server that it creashes the server and the application become unavailable.
- Impementing rate Limiting.
- Limit the ammount of data coming in request body.
- Avoid using evil regular expressions.



By Impementing Rate Limiting, we restrict same IP address from making too many requests to the server in a given period of time.




















